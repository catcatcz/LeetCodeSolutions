class RandomizedSet {
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(ss.find(val) != ss.end()) {return false;}
        ss[val] = vals.size();
        vals.push_back(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(ss.find(val) != ss.end()){
            int loc = ss[val];
            int tmp = vals[vals.size()-1];
            vals[loc] = tmp;
            ss[tmp] = loc;
            ss.erase(val);
            vals.erase(vals.begin()+ vals.size()-1);
            return true;
        }
        return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int x = rand()%ss.size();
        return vals[x];
    }
    
    unordered_map<int, int> ss;
    vector<int> vals;
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
