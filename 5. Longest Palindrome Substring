class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size()<2) {return s;}
        vector<vector<pair<int, int> > > lpss(s.size(), vector<pair<int, int>>(s.size(),make_pair(0,0)));
        vector<vector<bool> > isP(s.size(), vector<bool>(s.size(), false));
        
        for(size_t i=0; i< s.size(); i++) {
            lpss[i][i] = make_pair(i,i);isP[i][i] = true;
            if(i+1 >= s.size()) {continue;}
            if(s[i] == s[i+1]){
                lpss[i][i+1] = make_pair(i,i+1);
                isP[i][i+1] = true;
            }
            else{
                lpss[i][i+1] = make_pair(i,i); 
                isP[i][i+1] = false;
            }
        }
        
        for(size_t delta=2; delta< s.size(); delta++){
            for(size_t i=0; i< s.size()-delta; i++){
                isP[i][i+delta] = ((s[i] == s[i+delta]) && isP[i+1][i+delta-1]);
                if(isP[i][i+delta]) {
                    lpss[i][i+delta] = make_pair(i, i+delta);
                }
                else{
                    pair<int, int> range1 = lpss[i][i+delta-1];
                    pair<int, int> range2 = lpss[i+1][i+delta];
                    if(range1.second - range1.first > range2.second- range2.first){
                        lpss[i][i+delta] = range1;
                    }
                    else{
                        lpss[i][i+delta] = range2;
                    }
                }
            }
        }
        pair<int, int> range = lpss[0][s.size()-1];
        return s.substr(range.first, range.second-range.first+1);
    }
};
