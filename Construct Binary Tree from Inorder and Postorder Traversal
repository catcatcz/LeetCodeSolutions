/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree_longArray(vector<int> &inorder, int inorder_begin, int inorder_end, vector<int> &postorder, int postorder_begin, int postorder_end)
        {   
                if(inorder_begin==inorder_end)
                {   
                        TreeNode *root = new TreeNode(inorder[inorder_begin]); return root;
                }   
                else if(inorder_begin+1==inorder_end)
                {   
                        TreeNode *root = new TreeNode(postorder[postorder_end]); 
                        if(inorder[inorder_begin]== root->val)
                        {root->right = new TreeNode(inorder[inorder_end]); return root;}
                        else
                        {root->left  = new TreeNode(inorder[inorder_begin]); return root;}
                }   
                else
                {   
                TreeNode *root=new TreeNode(postorder[postorder_end]);
                TreeNode *ll, *rr; int rootloc=0;
                for(int i=inorder_begin; i< inorder_end+1; i++)
                { if(inorder[i]== postorder[postorder_end]) { rootloc= i; break; }}
                if(rootloc == inorder_begin)
                {   
                        root->left=NULL; root->right = buildTree_longArray(inorder, inorder_begin+1, inorder_end, postorder, postorder_begin, postorder_end-1);
                }   
                else if(rootloc== inorder_end)
                {   
                        root->right==NULL; root->left = buildTree_longArray(inorder, inorder_begin, inorder_end-1, postorder, postorder_begin, postorder_end-1);
                }   
                else
                {   
                        int left_end = rootloc-1 - inorder_begin+ postorder_begin;
                        root->left  = buildTree_longArray(inorder, inorder_begin, rootloc-1, postorder, postorder_begin, left_end);
                        root->right = buildTree_longArray(inorder, rootloc+1, inorder_end,   postorder, left_end+1,  postorder_end-1);
                        return root;
                }   

                }   
    
        }   
     TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        if(inorder.size()>0 && postorder.size()>0)
        {return buildTree_longArray(inorder,  0, inorder.size()-1, postorder, 0, postorder.size()-1);   }   
        else
        {return NULL;}
    }   
};
