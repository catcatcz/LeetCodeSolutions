#include <iostream>
#include <vector>
#include <set>
using namespace std;
class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int> >& prerequisites){
      if(numCourses < 2) {return true;}
      if(prerequisites.size() < 2) {return true;}
      vector<int> temp(numCourses, 0); 
      vector<vector<int> > mat(numCourses, temp);
      vector<int> in_count(numCourses, 0); 
      for(size_t i=0; i< prerequisites.size(); i++){
        int begin = prerequisites[i].first;
        int end = prerequisites[i].second;
        mat[begin][end] = 1;
        in_count[begin]++;
      }   
      set<int> residue;
      for(size_t i=0; i< numCourses; i++) {{residue.insert(i);}}
      bool canReduce = true;
      while(residue.size() > 0 && canReduce){
        set<int> to_reduce;
        for(set<int>::iterator it= residue.begin(); it!= residue.end(); ++it){
            if(in_count[*it] == 0 ) {to_reduce.insert(*it);}
        }   
        if(to_reduce.size() == 0) {canReduce= false;}
        else{
            for(set<int>::iterator it= to_reduce.begin(); it!= to_reduce.end(); ++it){ 
                residue.erase(*it); 
                for(set<int>::iterator itp= residue.begin(); itp != residue.end(); ++itp) {
                    if(mat[*itp][*it]== 1) { in_count[*itp]--;}
                }   
    
            }   
        }   
      }   
      return canReduce;
    }   
};

int main()
{
}
~                                                                                                             
~                                 
