#include<iostream>
#include<math.h>
#include<vector>
using namespace std;
const int CountDigit_mod(const int a, int p)
{
int sign=(a!=0? a/abs(a): 0); 
int result=1;
int temp=abs(a)/p;
while(temp>0)
{
temp=temp/p;
result=result+1;
}
const int result_c= result;
return result_c;
}
void Put(vector<int> &store, int x, int p)
{
int temp=x;
int i=0;
cout<<"x="<<x<<"  "<<endl;
while(temp!=0)
{int rest=(temp-temp/p*p);
store[i]=store[i]+rest-(store[i]+rest)/p*p;
i++;
temp=temp/p;
//cout<<"temp="<<temp<<endl;cout<<"store[0]="<<store[0]<<"  store[1]="<<store[1]<<endl;
}
//for(i=0; i<store.size(); i++)
//{cout<<store[i]<<" ";}
//cout<<endl;
}
int singleNumber(int A[], int n)
{
const int longmax=2147483647;
const int longmin=-2147483648;
const int DigitSize=CountDigit_mod(longmax, 3);
cout<<"DigitSize="<<DigitSize<<endl;
vector<int> Store_p(DigitSize,0);
vector<int> Store_n(DigitSize,0);
int zero_count=0;
for(int i=0;i<n; i++)
{
if(A[i]>0) {Put(Store_p, A[i],3);}
else if(A[i]<0) {Put(Store_n, -A[i],3);}
else {zero_count=zero_count+1;}
}
int tot_p=0;
int tot_n=0;
for(int i=0; i<DigitSize; i++)
{
tot_p=tot_p+Store_p[i]*pow(3,i);
tot_n=tot_n+Store_n[i]*pow(3,i);
//cout<<"i="<<i<<"p="<<Store_p[i]<<endl;
//cout<<"i="<<i<<"n="<<Store_n[i]<<endl;
}
if(tot_p!=0) {return tot_p;}
else if(tot_n!=0) {return -tot_n;}
else if(zero_count/3*3!=zero_count) {return 0;}
}
int main()
{
//       int a[16]={43,16,45,89,45,45,2111111146,43,2111111147,89,89,16,16,2111111146,43,2111111146};
//        for(int i=0; i<16; i++)
//        {cout<<"a[i]="<<a[i]<<endl;}
//      int a[7]={1,1,-3,1,-3,-3,-4};
//      int a[4]={2,2,3,2};
	int a[7]={0,1,0,1,0,1,99};
        cout<<singleNumber(a,7)<<endl;

} 
