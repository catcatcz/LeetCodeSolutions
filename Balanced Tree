#include<iostream>
using namespace std;
struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
  };
void CheckBalanced(TreeNode *root, bool &Balance, int &depth)
    {
        if(root==NULL)
        {Balance=true; depth=0;}
        else if(root!=NULL)
        {
            bool Balance_left, Balance_right;
            int depth_left, depth_right;
            CheckBalanced(root->left, Balance_left, depth_left);
            CheckBalanced(root->right, Balance_right, depth_right);
	   
            if(Balance_left==true && Balance_right==true)
            { 
                if(depth_left-1==depth_right || depth_left==depth_right || depth_left+1==depth_right)
                {Balance= true; depth=1+max(depth_left,depth_right);}
                else
                {Balance=false; depth=1+max(depth_left, depth_right);}
            }
            else
            {Balance = false; depth=1+max(depth_left, depth_right);}
        }
    }
    bool isBalanced(TreeNode *root) {
        int depth;
        bool Balance;
        CheckBalanced(root, Balance, depth);
        return Balance;
    }

int main()
{
TreeNode *root=new TreeNode(1);
root->right=new TreeNode(2);
root->right->right=new TreeNode(3);
bool isBal;
isBal=isBalanced(root);
if(isBal==true) {cout<<"true"<<endl;}
}
