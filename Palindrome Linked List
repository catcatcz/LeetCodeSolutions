/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
     bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)
        {return true;}
        else
        {   
                int n=0;
                ListNode *p,*q;p=head;
                ListNode *inversehead;
                while(p!=NULL)
                {p=p->next;n++;}
                inversehead=new ListNode(head->val);
                head=head->next;
                for(int i=1; i<n/2; i++)
                {   
                        q=new ListNode(head->val);
                        q->next=inversehead;
                        inversehead=q;
                        head=head->next;
                }   
//              int a;
 //               cout<<"head"<<endl;
   //             PrintList(head);
//              cin>>a;
     //           cout<<"inverse head"<<endl;
       //         PrintList(inversehead);
//              cin>>a;
        //      cout<<"n="<<n<<endl;
                if(n/2*2!=n) {head=head->next;}
                p=inversehead;
                q=head;
                for(int i=0;i<n/2;i++)
                {   
//              cout<<"p->val="<<p->val<<"q->val="<<q->val<<endl;
                if(p->val!=q->val) {return false;}
                p=p->next; q=q->next;
                }   
                return true;
        }   
    }   

};
