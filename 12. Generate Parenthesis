class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ret(1, "");
        vector<int> l_out(1, n);
        vector<int> r_out(1, n);
        for(int i=1; i<2*n+1; i++){
            vector<string> ret_temp;
            vector<int> l_temp;
            vector<int> r_temp;
            for(int j=0; j< ret.size(); j++){
                addOneChar(ret[j], l_out[j], r_out[j], ret_temp, l_temp, r_temp);
            }
            ret= ret_temp;
            l_out = l_temp;
            r_out = r_temp;
        }
        return ret;
        
    }
    void addOneChar(const string cur, const int l_in, const int r_in, vector<string>& out, vector<int>& l_out, vector<int>& r_out){
        if(l_in == r_in && l_in>0){
            out.push_back(cur+"(");
            l_out.push_back(l_in-1);
            r_out.push_back(r_in);
        }
        else if(l_in < r_in ){
            if(l_in >0){
            out.push_back(cur+"(");
            l_out.push_back(l_in-1);
            r_out.push_back(r_in);
            }
            if(r_in >0){
            out.push_back(cur+")");
            l_out.push_back(l_in);
            r_out.push_back(r_in-1);
            }
        }
        return;
    }
};
