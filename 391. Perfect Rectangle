
class Solution {
public:
    bool isRectangleCover(vector<vector<int>>& rectangles) {
        unordered_set<string > points;
        int area=0;
        int xmin = INT_MAX; int ymin = INT_MAX;
        int xmax = INT_MIN; int ymax = INT_MIN;
        for(const auto& bbox:rectangles){
            string bl= to_string(bbox[0])+"_"+to_string(bbox[1]);
            string tr= to_string(bbox[2])+"_"+to_string(bbox[3]);
            string br= to_string(bbox[2])+"_"+to_string(bbox[1]);
            string tl= to_string(bbox[0])+"_"+to_string(bbox[3]);
            
            if(!points.count(bl)) { points.insert(bl);}
            else {points.erase(bl);}
            if(!points.count(tr)) { points.insert(tr);}
            else {points.erase(tr);}
            if(!points.count(br)) { points.insert(br);}
            else {points.erase(br);}
            if(!points.count(tl)) { points.insert(tl);}
            else {points.erase(tl);}
            xmin = min(bbox[0], xmin); xmax = max(bbox[2], xmax);
            ymin = min(bbox[1], ymin); ymax = max(bbox[3], ymax);
            area += (bbox[3]- bbox[1])*(bbox[2]- bbox[0]);
        }   
        int total_area= (ymax - ymin)*(xmax - xmin);
        if(total_area != area) {return false;}
        
        if(points.size()!=4) {return false;}
        if(points.count(to_string(xmin)+"_"+to_string(ymin)) != 1) {return false;}
        if(points.count(to_string(xmax)+"_"+to_string(ymax)) != 1) {return false;}
        if(points.count(to_string(xmin)+"_"+to_string(ymax)) != 1) {return false;}
        if(points.count(to_string(xmax)+"_"+to_string(ymin)) != 1) {return false;}

        return true;
    }   
};
