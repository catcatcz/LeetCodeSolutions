/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head==NULL) {return head;}
        else if(head!=NULL)
        {   
        RandomListNode *p=head;
        map<RandomListNode *, int> mm; 
        vector<RandomListNode *> vv, uu; int index=0;
        while(p!=NULL)
        {   
        vv.push_back(p);  mm[p]= index; index++; p=p->next;
        }   
        RandomListNode *newhead = new RandomListNode(head->label); p =newhead; uu.push_back(p);
        for(int i=1; i< vv.size(); i++)
        {   
                p->next= new RandomListNode(vv[i]->label); p=p->next; uu.push_back(p);
        }   
        for(int i=0; i< vv.size(); i++)
        {   
               if( vv[i]->random != NULL)
                { int j=mm[vv[i]->random];
                uu[i]-> random = uu[j];} 
        }   
        newhead =uu[0];
        return newhead;
        }   
    }   
};
